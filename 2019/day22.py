import sys
sys.setrecursionlimit(50000000)

lines = open('in').read().split('\n')
lines = lines[::-1]
CARDS = 119315717514047
#CARDS = 10007
TIMES = 101741582076661

pos = 2020
#pos = 7096

A = 7637734911609
B = 65001756702389

def modinv(a, b):
  return (b - modinv(b%a, a)*b // a) if (1 < a) else 1

def trueMod(x):
  x %= CARDS
  if x < 0:
    x += CARDS
  return x

def mpw(a, n):
  if n == 0:
    return 1
  aux = mpw(a, n // 2)
  aux *= aux
  if n% 2 ==1:
    aux *= a
  return trueMod(aux)

#TIMES = 3
An = mpw(A, TIMES)
st = trueMod(B * (An - 1) * modinv(A - 1, CARDS))
res = trueMod(pos * An + st)
print(res)


'''
cache = {}

step = 0
while True:
  if pos in cache:
    break
  ipos = pos
  
  op = (1, 0)
  for line in lines:
    [x, y] = list(map(int, line.split()))
    #print(x, y)
    if x == 0:
      pos = CARDS - 1 - pos
      op = (-op[0], -op[1] - 1)
    if x == 1:
      m = 0
      if pos != 0:
        m = modinv(y, CARDS)
      #op = '({}*{})'.format(op, m)
      op = (op[0] * m, op[1] * m)
      pos = pos * m % CARDS
      #if pos != 0:
      #  pos = pos * modinv(y, CARDS) % CARDS
    if x == 2:
      if y < 0:
        y += CARDS
      pos += y
      pos %= CARDS
      #op = '({}+{})'.format(op, y)
      op = (op[0], op[1] + y)
    #print(pos)
  op = (trueMod(op[0]), trueMod(op[1]))
  print('pos * {} + {}'.format(op[0], op[1]))
  
  
  #pos = mul(adu(mul(adu(mul(adu(mul(opu(mul(adu(mul(opu(mul(opu(mul(adu(mul(adu(opu(mul(adu(mul(opu(adu(mul(adu(mul(adu(opu(adu(mul(opu(adu(mul(adu(mul(adu(mul(adu(mul(adu(mul(adu(mul(adu(opu(adu(opu(mul(adu(mul(opu(mul(opu(adu(mul(adu(mul(adu(mul(adu(opu(adu(opu(adu(mul(adu(mul(adu(mul(adu(mul(adu(mul(adu(mul(adu(mul(adu(mul(adu(mul(adu(mul(opu(mul(opu(adu(mul(adu(mul(adu(mul(opu(adu(mul(opu(mul(adu(mul(pos,108267965892376),119315717511312),27840334086611)),3615627803456),119315717512848)),53029207784021),2236),101418359886940),119315717510308),105871693005422),119315717514018)),83521002259833)),83730328080033),9281),47726287005619),4225),109088656012843),119315717512459),40567343954776),9882),23281115612497),7243),114202186763445),119315717506046),22726803336009),119315717510007),63820034949374),119315717506264),71021260425028),4303),17736120171007),119315717511844)),119315717511207)),119315717512754),86172462649034),8329),108267965892376),119315717506792),29828929378512),119315717508160)),30463587450395)),55068792698791),119315717508463),73578025800329)),119315717513201)),119315717513773),47726287005619),119315717510576),105871693005422),7520),28532019405533),538),97220214270705),3179),50709179943470),7596),40567343954776),2878)),43086231324517),6522)),119315717512737),47399394628868),119315717507747),9942976459504),119315717508415)),105871693005422),1174),26785161074582)),119315717512722),86172462649034),119315717508663),108267965892376)),49527278968095)),57064038811066),119315717508936),1864308086157)),58793252108371),119315717508651),87192255106419),119315717512182),27840334086611),2234),55680668173222)
  #pos = ((((((((-((((-((-(((((-((((-((((((-(((-((((((((((((((-((-((((-((-((((((((-((-(((((((((((((((((((((-((-(((((((-(((-(((pos*108267965892376)+119315717511312)*27840334086611)-1)*3615627803456)+119315717512848)-1)*53029207784021)+2236)*101418359886940)+119315717510308)*105871693005422)+119315717514018)-1)*83521002259833)-1)*83730328080033)+9281)*47726287005619)+4225)*109088656012843)+119315717512459)*40567343954776)+9882)*23281115612497)+7243)*114202186763445)+119315717506046)*22726803336009)+119315717510007)*63820034949374)+119315717506264)*71021260425028)+4303)*17736120171007)+119315717511844)-1)+119315717511207)-1)+119315717512754)*86172462649034)+8329)*108267965892376)+119315717506792)*29828929378512)+119315717508160)-1)*30463587450395)-1)*55068792698791)+119315717508463)*73578025800329)-1)+119315717513201)-1)+119315717513773)*47726287005619)+119315717510576)*105871693005422)+7520)*28532019405533)+538)*97220214270705)+3179)*50709179943470)+7596)*40567343954776)+2878)-1)*43086231324517)+6522)-1)+119315717512737)*47399394628868)+119315717507747)*9942976459504)+119315717508415)-1)*105871693005422)+1174)*26785161074582)-1)+119315717512722)*86172462649034)+119315717508663)*108267965892376)-1)*49527278968095)-1)*57064038811066)+119315717508936)*1864308086157)-1)*58793252108371)+119315717508651)*87192255106419)+119315717512182)*27840334086611)+2234)*55680668173222)
  pos = pos * 7637734911609 + 65001756702389
  pos = trueMod(pos)
  step += 1
  if step % 1000000 == 0:
    print(step)
  #print(ipos, '--->', pos, step)
  cache[ipos] = (pos, step)
  #break

print('Done', pos, cache[pos], step)
'''
